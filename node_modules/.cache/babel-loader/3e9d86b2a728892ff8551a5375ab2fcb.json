{"ast":null,"code":"var _jsxFileName = \"C:\\\\SeeColor\\\\src\\\\components\\\\pages\\\\Project.js\";\nimport \"./Project.css\";\nimport React, { useState } from \"react\";\n//import MagicDropZone from \"react-magic-dropzone\"\n//import { useNavigate } from \"react-router-dom\";\n//import Cookies from \"universal-cookie\";\nimport image from \"../../images/maintenance.png\";\n\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \n//  Convert each pixel value ( number ) to hexadecimal ( string ) with base 16\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rgbToHex = pixel => {\n  const componentToHex = c => {\n    const hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  };\n  return (\"#\" + componentToHex(pixel.r) + componentToHex(pixel.g) + componentToHex(pixel.b)).toUpperCase();\n};\n\n//from https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o\n//return luminance of an rgb value\nfunction luminance(r, g, b) {\n  var a = [r, g, b].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \n//build an array of rgb objects, and return iy\nconst buildRgb = imageData => {\n  const rgbValues = [];\n  // note that we are loopin every 4!\n  // for every Red, Green, Blue and Alpha\n  for (let i = 0; i < imageData.length; i += 4) {\n    const rgb = {\n      r: imageData[i],\n      g: imageData[i + 1],\n      b: imageData[i + 2]\n    };\n    rgbValues.push(rgb);\n  }\n  return rgbValues;\n};\n\n//from https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o\n// returns what color channel has the biggest difference\nconst findBiggestColorRange = rgbValues => {\n  /**\r\n   * Min is initialized to the maximum value posible\r\n   * from there we procced to find the minimum value for that color channel\r\n   *\r\n   * Max is initialized to the minimum value posible\r\n   * from there we procced to fin the maximum value for that color channel\r\n   */\n  let rMin = Number.MAX_VALUE;\n  let gMin = Number.MAX_VALUE;\n  let bMin = Number.MAX_VALUE;\n  let rMax = Number.MIN_VALUE;\n  let gMax = Number.MIN_VALUE;\n  let bMax = Number.MIN_VALUE;\n  rgbValues.forEach(pixel => {\n    rMin = Math.min(rMin, pixel.r);\n    gMin = Math.min(gMin, pixel.g);\n    bMin = Math.min(bMin, pixel.b);\n    rMax = Math.max(rMax, pixel.r);\n    gMax = Math.max(gMax, pixel.g);\n    bMax = Math.max(bMax, pixel.b);\n  });\n  const rRange = rMax - rMin;\n  const gRange = gMax - gMin;\n  const bRange = bMax - bMin;\n\n  // determine which color has the biggest difference\n  const biggestRange = Math.max(rRange, gRange, bRange);\n  if (biggestRange === rRange) {\n    return \"r\";\n  } else if (biggestRange === gRange) {\n    return \"g\";\n  } else {\n    return \"b\";\n  }\n};\n\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \n//quantize with median cut\nconst quantization = (rgbValues, depth) => {\n  const MAX_DEPTH = 4;\n\n  // Base case\n  if (depth === MAX_DEPTH || rgbValues.length === 0) {\n    const color = rgbValues.reduce((prev, curr) => {\n      prev.r += curr.r;\n      prev.g += curr.g;\n      prev.b += curr.b;\n      return prev;\n    }, {\n      r: 0,\n      g: 0,\n      b: 0\n    });\n    color.r = Math.round(color.r / rgbValues.length);\n    color.g = Math.round(color.g / rgbValues.length);\n    color.b = Math.round(color.b / rgbValues.length);\n    return [color];\n  }\n\n  /**\r\n   *  Recursively do the following:\r\n   *  1. Find the pixel channel (red,green or blue) with biggest difference/range\r\n   *  2. Order by this channel\r\n   *  3. Divide in half the rgb colors list\r\n   *  4. Repeat process again, until desired depth or base case\r\n   */\n  const componentToSortBy = findBiggestColorRange(rgbValues);\n  rgbValues.sort((p1, p2) => {\n    return p1[componentToSortBy] - p2[componentToSortBy];\n  });\n  const mid = rgbValues.length / 2;\n  return [...quantization(rgbValues.slice(0, mid), depth + 1), ...quantization(rgbValues.slice(mid + 1), depth + 1)];\n};\n\n//test contrast of image\nconst contrastTest = rgbTestValues => {\n  //stores rgb pairs and their contrast\n  const ratios = [];\n  let skip = false;\n\n  //get the luminance of every value pair\n  for (let i = 0; i < rgbTestValues.length; i++) {\n    const lumOne = luminance(rgbTestValues[i].r, rgbTestValues[i].g, rgbTestValues[i].b);\n    for (let j = i + 1; j < rgbTestValues.length; j++) {\n      //if values are the same, skip this iteration of loop\n      if (rgbTestValues[i].r == rgbTestValues[j].r && rgbTestValues[i].g == rgbTestValues[j].g && rgbTestValues[i].b == rgbTestValues[j].b) {\n        continue;\n      }\n\n      //check if pair has all ready been added\n      for (let k = 0; k < ratios.length; k++) {\n        if (ratios[k].colour1.r == rgbTestValues[i].r && ratios[k].colour1.g == rgbTestValues[i].g && ratios[k].colour1.b == rgbTestValues[i].b && ratios[k].colour2.r == rgbTestValues[j].r && ratios[k].colour2.g == rgbTestValues[j].g && ratios[k].colour2.b == rgbTestValues[j].b || ratios[k].colour1.r == rgbTestValues[j].r && ratios[k].colour1.g == rgbTestValues[j].g && ratios[k].colour1.b == rgbTestValues[j].b && ratios[k].colour2.r == rgbTestValues[i].r && ratios[k].colour2.g == rgbTestValues[i].g && ratios[k].colour2.b == rgbTestValues[i].b) {\n          skip = true;\n        }\n      }\n\n      //if it has been, skip adding again\n      //if not, add it\n      if (!skip) {\n        const lumTwo = luminance(rgbTestValues[j].r, rgbTestValues[j].g, rgbTestValues[j].b);\n\n        //use luminance to calculate contrast\n        const ratio = lumOne > lumTwo ? (lumTwo + 0.05) / (lumOne + 0.05) : (lumOne + 0.05) / (lumTwo + 0.05);\n\n        //add pair\n        const ratioAndColours = {\n          colour1: rgbTestValues[i],\n          colour2: rgbTestValues[j],\n          contrastRatio: ratio\n        };\n        ratios.push(ratioAndColours);\n      }\n\n      //set skip back\n      skip = false;\n    }\n  }\n\n  //display all value pairs and their contrast\n  printContrasts(ratios);\n};\nconst printContrasts = ratios => {\n  const resultsContainer = document.getElementById(\"results\");\n  resultsContainer.innerHTML = \"\";\n  for (let i = 0; i < ratios.length; i += 1) {\n    const contrastElement = document.createElement(\"div\");\n    const colour1Element = document.createElement(\"div\");\n    const colour2Element = document.createElement(\"div\");\n    contrastElement.appendChild(document.createTextNode(ratios[i].contrastRatio.toFixed(5)));\n    const hex1 = rgbToHex(ratios[i].colour1);\n    const hex2 = rgbToHex(ratios[i].colour2);\n    colour1Element.style.backgroundColor = hex1;\n    colour2Element.style.backgroundColor = hex2;\n    colour1Element.appendChild(document.createTextNode(hex1));\n    colour2Element.appendChild(document.createTextNode(hex2));\n    resultsContainer.appendChild(contrastElement);\n    resultsContainer.appendChild(colour1Element);\n    resultsContainer.appendChild(colour2Element);\n  }\n};\nconst getDataFromImage = () => {\n  const imgFile = document.getElementById(\"imgfile\");\n  const image = new Image();\n  const file = imgFile.files[0];\n  const fileReader = new FileReader();\n\n  // Whenever file & image is loaded procced to extract the information from the image\n  fileReader.onload = () => {\n    image.onload = () => {\n      // Set the canvas size to be the same as of the uploaded image\n      const canvas = document.getElementById(\"canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, 0, 0);\n\n      /**\r\n       * getImageData returns an array full of RGBA values\r\n       * each pixel consists of four values: the red value of the colour, the green, the blue and the alpha\r\n       * (transparency). For array value consistency reasons,\r\n       * the alpha is not from 0 to 1 like it is in the RGBA of CSS, but from 0 to 255.\r\n       */\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      // Convert the image data to RGB values so its much simpler\n      const rgbArray = buildRgb(imageData.data);\n\n      /**\r\n       * Color quantization\r\n       * A process that reduces the number of colors used in an image\r\n       * while trying to visually maintin the original image as much as possible\r\n       */\n      const quantColors = quantization(rgbArray, 0);\n      contrastTest(quantColors);\n    };\n    image.src = fileReader.result;\n  };\n  fileReader.readAsDataURL(file);\n};\nconst Project = () => {\n  /*React.useEffect(() => {\r\n  \r\n    var c = document.getElementById(\"myCanvas\");\r\n    var ctx = c.getContext(\"2d\");\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  }, []);*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Colour Contrast Tester\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"imgfile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      id: \"btnLoad\",\n      value: \"Load\",\n      onclick: \"getDataFromImage();\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\",\n      children: \"Your browser does not support the HTML canvas tag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_c = Project;\nexport default Project;\n\n// <img src={image} alt=\"down for temporary maintenance\"/>\n\n/* <div className=\"GuestUIContainer\">\r\n        <div className=\"PosterDragAndDrop\">\r\n          <h2 className=\"SectionHeading\">Upload a Poster</h2>\r\n          <MagicDropZone\r\n            className=\"DragAndDropArea\"\r\n            accept=\".jpg, .png, .jpeg\"\r\n            onDrop={fileDrop}\r\n          >\r\n            {filePreview === null ? (\r\n              \"Drop your poster here\"\r\n            ) : (\r\n              <img className=\"PosterImg\" src={filePreview} alt=\"User Upload\" />\r\n            )}\r\n          </MagicDropZone>\r\n        </div>\r\n        <div className=\"PosterRatingContainer\">\r\n          <h2 className=\"SectionHeading\">Accessibility Score</h2>\r\n          <div style={{ width: \"95%\" }}>\r\n            <BarGraph chartData={BarGraphData.build} />\r\n            <p className=\"TimeToCalculate\">\r\n              {calculating\r\n                ? `Calculating score...`\r\n                : `Calculated in ${totalCalculationTime} seconds`}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToastContainer autoClose={1000} limit={3} />*/\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","image","rgbToHex","pixel","componentToHex","c","hex","toString","length","r","g","b","toUpperCase","luminance","a","map","v","Math","pow","buildRgb","imageData","rgbValues","i","rgb","push","findBiggestColorRange","rMin","Number","MAX_VALUE","gMin","bMin","rMax","MIN_VALUE","gMax","bMax","forEach","min","max","rRange","gRange","bRange","biggestRange","quantization","depth","MAX_DEPTH","color","reduce","prev","curr","round","componentToSortBy","sort","p1","p2","mid","slice","contrastTest","rgbTestValues","ratios","skip","lumOne","j","k","colour1","colour2","lumTwo","ratio","ratioAndColours","contrastRatio","printContrasts","resultsContainer","document","getElementById","innerHTML","contrastElement","createElement","colour1Element","colour2Element","appendChild","createTextNode","toFixed","hex1","hex2","style","backgroundColor","getDataFromImage","imgFile","Image","file","files","fileReader","FileReader","onload","canvas","width","height","ctx","getContext","drawImage","getImageData","rgbArray","data","quantColors","src","result","readAsDataURL","Project"],"sources":["C:/SeeColor/src/components/pages/Project.js"],"sourcesContent":["import \"./Project.css\"\r\nimport React, { useState } from \"react\";\r\n//import MagicDropZone from \"react-magic-dropzone\"\r\n//import { useNavigate } from \"react-router-dom\";\r\n//import Cookies from \"universal-cookie\";\r\nimport image from \"../../images/maintenance.png\"\r\n\r\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \r\n//  Convert each pixel value ( number ) to hexadecimal ( string ) with base 16\r\nconst rgbToHex = (pixel) => {\r\n  const componentToHex = (c) => {\r\n    const hex = c.toString(16);\r\n    return hex.length == 1 ? \"0\" + hex : hex;\r\n  };\r\n\r\n  return (\"#\" + componentToHex(pixel.r) + componentToHex(pixel.g) + componentToHex(pixel.b)).toUpperCase();\r\n};\r\n\r\n\r\n//from https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o\r\n//return luminance of an rgb value\r\nfunction luminance(r, g, b) {\r\n  var a = [r, g, b].map(function (v) {\r\n      v /= 255;\r\n      return v <= 0.03928\r\n          ? v / 12.92\r\n          : Math.pow( (v + 0.055) / 1.055, 2.4 );\r\n  });\r\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\r\n}\r\n\r\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \r\n//build an array of rgb objects, and return iy\r\nconst buildRgb = (imageData) => {\r\n  const rgbValues = [];\r\n  // note that we are loopin every 4!\r\n  // for every Red, Green, Blue and Alpha\r\n  for (let i = 0; i < imageData.length; i += 4) {\r\n    const rgb = {r: imageData[i], g: imageData[i + 1], b: imageData[i + 2],};\r\n\r\n    rgbValues.push(rgb);\r\n  }\r\n\r\n  return rgbValues;\r\n};\r\n\r\n//from https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o\r\n// returns what color channel has the biggest difference\r\nconst findBiggestColorRange = (rgbValues) => {\r\n  /**\r\n   * Min is initialized to the maximum value posible\r\n   * from there we procced to find the minimum value for that color channel\r\n   *\r\n   * Max is initialized to the minimum value posible\r\n   * from there we procced to fin the maximum value for that color channel\r\n   */\r\n  let rMin = Number.MAX_VALUE;\r\n  let gMin = Number.MAX_VALUE;\r\n  let bMin = Number.MAX_VALUE;\r\n\r\n  let rMax = Number.MIN_VALUE;\r\n  let gMax = Number.MIN_VALUE;\r\n  let bMax = Number.MIN_VALUE;\r\n\r\n  rgbValues.forEach((pixel) => {\r\n    rMin = Math.min(rMin, pixel.r);\r\n    gMin = Math.min(gMin, pixel.g);\r\n    bMin = Math.min(bMin, pixel.b);\r\n\r\n    rMax = Math.max(rMax, pixel.r);\r\n    gMax = Math.max(gMax, pixel.g);\r\n    bMax = Math.max(bMax, pixel.b);\r\n  });\r\n\r\n  const rRange = rMax - rMin;\r\n  const gRange = gMax - gMin;\r\n  const bRange = bMax - bMin;\r\n\r\n  // determine which color has the biggest difference\r\n  const biggestRange = Math.max(rRange, gRange, bRange);\r\n  if (biggestRange === rRange) {\r\n    return \"r\";\r\n  } else if (biggestRange === gRange) {\r\n    return \"g\";\r\n  } else {\r\n    return \"b\";\r\n  }\r\n};\r\n\r\n//from https://github.com/zygisS22/color-palette-extraction/blob/master/index.js  \r\n//quantize with median cut\r\nconst quantization = (rgbValues, depth) => {\r\n  const MAX_DEPTH = 4;\r\n\r\n  // Base case\r\n  if (depth === MAX_DEPTH || rgbValues.length === 0) {\r\n    const color = rgbValues.reduce(\r\n      (prev, curr) => {\r\n        prev.r += curr.r;\r\n        prev.g += curr.g;\r\n        prev.b += curr.b;\r\n\r\n        return prev;\r\n      },\r\n      {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n      }\r\n    );\r\n\r\n    color.r = Math.round(color.r / rgbValues.length);\r\n    color.g = Math.round(color.g / rgbValues.length);\r\n    color.b = Math.round(color.b / rgbValues.length);\r\n\r\n    return [color];\r\n  }\r\n\r\n  /**\r\n   *  Recursively do the following:\r\n   *  1. Find the pixel channel (red,green or blue) with biggest difference/range\r\n   *  2. Order by this channel\r\n   *  3. Divide in half the rgb colors list\r\n   *  4. Repeat process again, until desired depth or base case\r\n   */\r\n  const componentToSortBy = findBiggestColorRange(rgbValues);\r\n  rgbValues.sort((p1, p2) => {\r\n    return p1[componentToSortBy] - p2[componentToSortBy];\r\n  });\r\n\r\n  const mid = rgbValues.length / 2;\r\n  return [\r\n    ...quantization(rgbValues.slice(0, mid), depth + 1),\r\n    ...quantization(rgbValues.slice(mid + 1), depth + 1),\r\n  ];\r\n};\r\n\r\n//test contrast of image\r\nconst contrastTest = (rgbTestValues) =>{\r\n  //stores rgb pairs and their contrast\r\n  const ratios = [];\r\n  let skip = false;\r\n  \r\n  //get the luminance of every value pair\r\n  for (let i = 0; i < rgbTestValues.length; i++){\r\n    const lumOne = luminance(rgbTestValues[i].r,rgbTestValues[i].g, rgbTestValues[i].b);\r\n\r\n    for(let j = i + 1; j < rgbTestValues.length; j++){\r\n      //if values are the same, skip this iteration of loop\r\n      if (rgbTestValues[i].r == rgbTestValues[j].r && rgbTestValues[i].g == rgbTestValues[j].g && rgbTestValues[i].b == rgbTestValues[j].b){\r\n        continue;\r\n      }\r\n\r\n      //check if pair has all ready been added\r\n      for (let k = 0; k < ratios.length; k++){\r\n        if (ratios[k].colour1.r == rgbTestValues[i].r && ratios[k].colour1.g == rgbTestValues[i].g && ratios[k].colour1.b == rgbTestValues[i].b &&\r\n          ratios[k].colour2.r == rgbTestValues[j].r && ratios[k].colour2.g == rgbTestValues[j].g && ratios[k].colour2.b == rgbTestValues[j].b\r\n          || \r\n          ratios[k].colour1.r == rgbTestValues[j].r && ratios[k].colour1.g == rgbTestValues[j].g && ratios[k].colour1.b == rgbTestValues[j].b &&\r\n          ratios[k].colour2.r == rgbTestValues[i].r && ratios[k].colour2.g == rgbTestValues[i].g && ratios[k].colour2.b == rgbTestValues[i].b) {\r\n            skip = true;\r\n          }\r\n        }\r\n\r\n     //if it has been, skip adding again\r\n     //if not, add it\r\n     if (!skip){\r\n\r\n      const lumTwo = luminance(rgbTestValues[j].r,rgbTestValues[j].g, rgbTestValues[j].b);\r\n\r\n      //use luminance to calculate contrast\r\n    const ratio = lumOne > lumTwo \r\n    ? ((lumTwo  + 0.05) / (lumOne + 0.05))\r\n    : ((lumOne + 0.05) / (lumTwo  + 0.05));\r\n\r\n    //add pair\r\n      const ratioAndColours = {\r\n        colour1: rgbTestValues[i],\r\n        colour2: rgbTestValues[j],\r\n        contrastRatio: ratio,\r\n      };\r\n      \r\n      ratios.push(ratioAndColours);\r\n      }\r\n\r\n      //set skip back\r\n      skip = false;\r\n    }\r\n  }\r\n\r\n  //display all value pairs and their contrast\r\n printContrasts(ratios);\r\n}\r\n\r\nconst printContrasts = (ratios) =>{\r\n  const resultsContainer = document.getElementById(\"results\");\r\n  resultsContainer.innerHTML = \"\";\r\n  for (let i = 0; i < ratios.length; i += 1){\r\n    const contrastElement = document.createElement(\"div\");\r\n    const colour1Element = document.createElement(\"div\");\r\n    const colour2Element = document.createElement(\"div\");\r\n    contrastElement.appendChild(document.createTextNode(ratios[i].contrastRatio.toFixed(5)));\r\n\r\n    const hex1 = rgbToHex(ratios[i].colour1);\r\n    const hex2= rgbToHex(ratios[i].colour2);\r\n    colour1Element.style.backgroundColor = hex1;\r\n    colour2Element.style.backgroundColor = hex2;\r\n    colour1Element.appendChild(document.createTextNode(hex1));\r\n    colour2Element.appendChild(document.createTextNode(hex2));\r\n\r\n    resultsContainer.appendChild(contrastElement);\r\n    resultsContainer.appendChild(colour1Element);\r\n    resultsContainer.appendChild(colour2Element);\r\n  }\r\n}\r\n\r\nconst getDataFromImage = () =>{\r\n  const imgFile = document.getElementById(\"imgfile\");\r\n  const image = new Image();\r\n  const file = imgFile.files[0];\r\n  const fileReader = new FileReader();\r\n\r\n  // Whenever file & image is loaded procced to extract the information from the image\r\n  fileReader.onload = () => {\r\n    image.onload = () => {\r\n      // Set the canvas size to be the same as of the uploaded image\r\n      const canvas = document.getElementById(\"canvas\");\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(image, 0, 0);\r\n\r\n      /**\r\n       * getImageData returns an array full of RGBA values\r\n       * each pixel consists of four values: the red value of the colour, the green, the blue and the alpha\r\n       * (transparency). For array value consistency reasons,\r\n       * the alpha is not from 0 to 1 like it is in the RGBA of CSS, but from 0 to 255.\r\n       */\r\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n      // Convert the image data to RGB values so its much simpler\r\n      const rgbArray = buildRgb(imageData.data);\r\n\r\n      /**\r\n       * Color quantization\r\n       * A process that reduces the number of colors used in an image\r\n       * while trying to visually maintin the original image as much as possible\r\n       */\r\n      const quantColors = quantization(rgbArray, 0);\r\n      contrastTest(quantColors);\r\n    };\r\n    image.src = fileReader.result;\r\n  };\r\n  fileReader.readAsDataURL(file);\r\n}\r\n\r\nconst Project = () => {\r\n  /*React.useEffect(() => {\r\n\r\n\r\n    var c = document.getElementById(\"myCanvas\");\r\n    var ctx = c.getContext(\"2d\");\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  }, []);*/\r\n\r\n  return (\r\n    <div>\r\n      <h1>Colour Contrast Tester</h1>\r\n      <input type=\"file\" id=\"imgfile\" />\r\n      <input type=\"button\" id=\"btnLoad\" value=\"Load\" onclick=\"getDataFromImage();\" />\r\n      <canvas id=\"canvas\">\r\n        Your browser does not support the HTML canvas tag.\r\n      </canvas>\r\n      <div id=\"results\"></div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Project;\r\n\r\n\r\n// <img src={image} alt=\"down for temporary maintenance\"/>\r\n\r\n\r\n/* <div className=\"GuestUIContainer\">\r\n        <div className=\"PosterDragAndDrop\">\r\n          <h2 className=\"SectionHeading\">Upload a Poster</h2>\r\n          <MagicDropZone\r\n            className=\"DragAndDropArea\"\r\n            accept=\".jpg, .png, .jpeg\"\r\n            onDrop={fileDrop}\r\n          >\r\n            {filePreview === null ? (\r\n              \"Drop your poster here\"\r\n            ) : (\r\n              <img className=\"PosterImg\" src={filePreview} alt=\"User Upload\" />\r\n            )}\r\n          </MagicDropZone>\r\n        </div>\r\n        <div className=\"PosterRatingContainer\">\r\n          <h2 className=\"SectionHeading\">Accessibility Score</h2>\r\n          <div style={{ width: \"95%\" }}>\r\n            <BarGraph chartData={BarGraphData.build} />\r\n            <p className=\"TimeToCalculate\">\r\n              {calculating\r\n                ? `Calculating score...`\r\n                : `Calculated in ${totalCalculationTime} seconds`}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ToastContainer autoClose={1000} limit={3} />*/\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}